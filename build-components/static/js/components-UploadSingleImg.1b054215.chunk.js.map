{"version":3,"file":"static/js/components-UploadSingleImg.1b054215.chunk.js","mappings":"0PAAMA,EAAkB,kB,cCwBlBC,EAA2B,CAC/BC,aAAc,SAACC,GACb,IAAMC,EAAQD,EAAKE,KAAKC,QAAQ,WAAa,EAQ7C,OAPKF,GACHG,EAAAA,GAAQC,MAAM,GAADC,OAAIN,EAAKO,KAAI,uBAEbP,EAAKQ,KAAO,KAAO,KAAO,GAEvCJ,EAAAA,GAAQC,MAAM,gCAETJ,GAASQ,EAAAA,EAAOC,WACzB,EACAC,OAAO,GAADL,OAAKM,8BAA8B,uBACzCC,QAAS,CACPC,cAAe,UD9BVC,aAAaC,QAAQnB,ICgC5BoB,SAAU,eACVC,gBAAgB,GA0DlB,EAvDyC,SAACC,GACxC,IAAQC,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,MAElBC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GACdG,GAD0BH,EAAA,IACMD,EAAAA,EAAAA,aAAkBK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA3CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAE5BG,EAAAA,EAAAA,YAAU,WACRD,EAAYT,EACd,GAAG,CAACA,IAqBJ,IAAMW,GACJC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGR,GAAUS,EAAAA,EAAAA,KAACC,EAAAA,EAAe,KAAMD,EAAAA,EAAAA,KAACE,EAAAA,EAAY,KAC9CF,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEC,UAAW,GAAIL,SAAC,cAUlC,OACEC,EAAAA,EAAAA,KAACK,EAAAA,EAAO,CAACC,gBAAc,EAAAP,UACrBC,EAAAA,EAAAA,KAAC1B,EAAAA,GAAMiC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK5C,GAAW,IAAEsB,SAR7B,SAAuBuB,GAAiD,IAA9C3C,EAAI2C,EAAJ3C,KACJ,SAAhBA,EAAK4C,QACPxB,EAAUpB,EAAK6C,SAAiBC,KAEpC,EAIsDZ,SAC/CL,GACCM,EAAAA,EAAAA,KAAA,OAAKY,IAAKlB,EAAUmB,IAAI,SAASV,MAAO,CAAEW,MAAO,UAEjDjB,MAKV,C","sources":["utils/auth.ts","EditFormComponents/UploadSingleImg/index.tsx"],"sourcesContent":["const SLOW_AUTH_TOKEN = \"SLOW_AUTH_TOKEN\";\nconst SLOW_USER = \"SLOW_USER\";\n\nfunction setToken(token: string) {\n  localStorage.setItem(SLOW_AUTH_TOKEN, token);\n}\n\nexport function getToken() {\n  return localStorage.getItem(SLOW_AUTH_TOKEN);\n}\n\nexport function removeToken() {\n  return localStorage.removeItem(SLOW_AUTH_TOKEN);\n}\n\nexport function getUserStorage() {\n  return JSON.parse(localStorage.getItem(SLOW_USER) || \"null\");\n}\n\nexport function removeUserStorage() {\n  return localStorage.removeItem(SLOW_USER);\n}\n\nexport function removeAuthStorage() {\n  removeToken();\n  removeUserStorage();\n}\n","import ImgCrop from \"antd-img-crop\";\nimport type {\n  RcFile,\n  UploadChangeParam,\n  UploadFile,\n  UploadProps,\n} from \"antd/es/upload/interface\";\nimport React, { useEffect, useState } from \"react\";\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { isFunction } from \"lodash-es\";\nimport { message, Upload } from \"antd\";\nimport { getToken } from \"src/utils/auth\";\n\ninterface Props {\n  onChange: (value: string) => void;\n  value: string;\n}\n\nconst getBase64 = (img: RcFile, callback: (url: string) => void) => {\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", () => callback(reader.result as string));\n  reader.readAsDataURL(img);\n};\n\nconst uploadProps: UploadProps = {\n  beforeUpload: (file) => {\n    const isPNG = file.type.indexOf(\"image/\") > -1;\n    if (!isPNG) {\n      message.error(`${file.name} is not a png file`);\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n    }\n    return isPNG || Upload.LIST_IGNORE;\n  },\n  action: `${process.env.REACT_APP_BASE_URL}/api/v1/upload/file`,\n  headers: {\n    Authorization: \"Bearer \" + getToken(),\n  },\n  listType: \"picture-card\",\n  showUploadList: false,\n};\n\nconst UploadSingleImg: React.FC<Props> = (props) => {\n  const { onChange, value } = props;\n\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState<string>();\n\n  useEffect(() => {\n    setImageUrl(value);\n  }, [value]);\n\n  // const beforeUpload = (file: RcFile) => {\n  //   const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n  //   if (!isJpgOrPng) {\n  //     message.error(\"You can only upload JPG/PNG file!\");\n  //   }\n  //   const isLt2M = file.size / 1024 / 1024 < 2;\n  //   if (!isLt2M) {\n  //     message.error(\"Image must smaller than 2MB!\");\n  //   }\n  //   getBase64(file as RcFile, (url) => {\n  //     setLoading(false);\n  //     setImageUrl(url);\n\n  //     isFunction(onChange) && onChange(url);\n  //   });\n\n  //   return false;\n  // };\n\n  const uploadButton = (\n    <div>\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  function onChangeUpload({ file }: UploadChangeParam<UploadFile<File>>) {\n    if (file.status === \"done\") {\n      onChange((file.response as any).data);\n    }\n  }\n\n  return (\n    <ImgCrop rotationSlider>\n      <Upload {...uploadProps} onChange={onChangeUpload}>\n        {imageUrl ? (\n          <img src={imageUrl} alt=\"avatar\" style={{ width: \"100%\" }} />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n    </ImgCrop>\n  );\n};\n\nexport default UploadSingleImg;\n"],"names":["SLOW_AUTH_TOKEN","uploadProps","beforeUpload","file","isPNG","type","indexOf","message","error","concat","name","size","Upload","LIST_IGNORE","action","process","headers","Authorization","localStorage","getItem","listType","showUploadList","props","onChange","value","_useState","useState","_useState2","_slicedToArray","loading","_useState3","_useState4","imageUrl","setImageUrl","useEffect","uploadButton","_jsxs","children","_jsx","LoadingOutlined","PlusOutlined","style","marginTop","ImgCrop","rotationSlider","_objectSpread","_ref","status","response","data","src","alt","width"],"sourceRoot":""}