{"version":3,"file":"static/js/components-UploadSingleImg.de705975.chunk.js","mappings":"8NAwEA,UAtDyC,SAACA,GACxC,IAAQC,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,MAElBC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAgCL,EAAAA,EAAAA,YAAkBM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAE5BG,EAAAA,EAAAA,YAAU,WACRD,EAAYV,EACd,GAAG,CAACA,IAEJ,IAmBMY,GACJC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGT,GAAUU,EAAAA,EAAAA,KAACC,EAAAA,EAAe,KAAMD,EAAAA,EAAAA,KAACE,EAAAA,EAAY,KAC9CF,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEC,UAAW,GAAIL,SAAC,cAIlC,OACEC,EAAAA,EAAAA,KAACK,EAAAA,EAAO,CAACC,gBAAc,EAAAP,UACrBC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CACLC,OAAO,mDACPC,SAAS,eACTC,gBAAgB,EAChBC,aAhCe,SAACC,GAgBpB,MAfiC,eAAdA,EAAKC,MAAuC,cAAdD,EAAKC,MAEpDC,EAAAA,GAAQC,MAAM,qCAEDH,EAAKI,KAAO,KAAO,KAAO,GAEvCF,EAAAA,GAAQC,MAAM,gCAvBF,SAACE,EAAaC,GAC9B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAMH,EAASC,EAAOG,OAAiB,IACvEH,EAAOI,cAAcN,EACvB,CAqBIO,CAAUZ,GAAgB,SAACa,GACzBlC,GAAW,GACXI,EAAY8B,IAEZC,EAAAA,EAAAA,GAAW1C,IAAaA,EAASyC,EACnC,KAEO,CACT,EAeiC1B,SAE1BL,GACCM,EAAAA,EAAAA,KAAA,OAAK2B,IAAKjC,EAAUkC,IAAI,SAASzB,MAAO,CAAE0B,MAAO,UAEjDhC,KAKV,C","sources":["EditFormComponents/UploadSingleImg/index.tsx"],"sourcesContent":["import ImgCrop from \"antd-img-crop\";\r\nimport type { RcFile } from \"antd/es/upload/interface\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { isFunction } from \"lodash-es\";\r\nimport { message, Upload } from \"antd\";\r\n\r\ninterface Props {\r\n  onChange: (value: string) => void;\r\n  value: string;\r\n}\r\n\r\nconst getBase64 = (img: RcFile, callback: (url: string) => void) => {\r\n  const reader = new FileReader();\r\n  reader.addEventListener(\"load\", () => callback(reader.result as string));\r\n  reader.readAsDataURL(img);\r\n};\r\n\r\nconst UploadSingleImg: React.FC<Props> = (props) => {\r\n  const { onChange, value } = props;\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState<string>();\r\n\r\n  useEffect(() => {\r\n    setImageUrl(value);\r\n  }, [value]);\r\n\r\n  const beforeUpload = (file: RcFile) => {\r\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n    if (!isJpgOrPng) {\r\n      message.error(\"You can only upload JPG/PNG file!\");\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 2;\r\n    if (!isLt2M) {\r\n      message.error(\"Image must smaller than 2MB!\");\r\n    }\r\n    getBase64(file as RcFile, (url) => {\r\n      setLoading(false);\r\n      setImageUrl(url);\r\n\r\n      isFunction(onChange) && onChange(url);\r\n    });\r\n\r\n    return false;\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ImgCrop rotationSlider>\r\n      <Upload\r\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        listType=\"picture-card\"\r\n        showUploadList={false}\r\n        beforeUpload={beforeUpload}\r\n      >\r\n        {imageUrl ? (\r\n          <img src={imageUrl} alt=\"avatar\" style={{ width: \"100%\" }} />\r\n        ) : (\r\n          uploadButton\r\n        )}\r\n      </Upload>\r\n    </ImgCrop>\r\n  );\r\n};\r\n\r\nexport default UploadSingleImg;\r\n"],"names":["props","onChange","value","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","imageUrl","setImageUrl","useEffect","uploadButton","_jsxs","children","_jsx","LoadingOutlined","PlusOutlined","style","marginTop","ImgCrop","rotationSlider","Upload","action","listType","showUploadList","beforeUpload","file","type","message","error","size","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","url","isFunction","src","alt","width"],"sourceRoot":""}