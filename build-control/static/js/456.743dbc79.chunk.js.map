{"version":3,"file":"static/js/456.743dbc79.chunk.js","mappings":"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","sources":["../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/utils/assertEnvironment.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/utils/observerBatching.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/utils/printDebugValue.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/utils/UniversalFinalizationRegistry.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/utils/observerFinalizationRegistry.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/staticRendering.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/useObserver.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/observer.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/ObserverComponent.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/useLocalObservable.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/useAsObservableSource.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/useLocalStore.ts","../../../node_modules/.pnpm/registry.npmmirror.com+mobx-react-lite@3.4.3_lrdhi4fih7ii4kmeak7ov4c3ha/node_modules/mobx-react-lite/src/index.ts"],"sourcesContent":["import { makeObservable } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!makeObservable) {\n    throw new Error(\"mobx-react-lite@3 requires mobx at least version 6 to be available\")\n}\n","import { configure } from \"mobx\"\n\nexport function defaultNoopBatch(callback: () => void) {\n    callback()\n}\n\nexport function observerBatching(reactionScheduler: any) {\n    if (!reactionScheduler) {\n        reactionScheduler = defaultNoopBatch\n        if (\"production\" !== process.env.NODE_ENV) {\n            console.warn(\n                \"[MobX] Failed to get unstable_batched updates from react-dom / react-native\"\n            )\n        }\n    }\n    configure({ reactionScheduler })\n}\n\nexport const isObserverBatched = () => {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\"[MobX] Deprecated\")\n    }\n\n    return true\n}\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","export declare class FinalizationRegistryType<T> {\n    constructor(finalize: (value: T) => void)\n    register(target: object, value: T, token?: object): void\n    unregister(token: object): void\n}\n\ndeclare const FinalizationRegistry: typeof FinalizationRegistryType | undefined\n\nexport const REGISTRY_FINALIZE_AFTER = 10_000\nexport const REGISTRY_SWEEP_INTERVAL = 10_000\n\nexport class TimerBasedFinalizationRegistry<T> implements FinalizationRegistryType<T> {\n    private registrations: Map<unknown, { value: T; registeredAt: number }> = new Map()\n    private sweepTimeout: ReturnType<typeof setTimeout> | undefined\n\n    constructor(private readonly finalize: (value: T) => void) {}\n\n    // Token is actually required with this impl\n    register(target: object, value: T, token?: object) {\n        this.registrations.set(token, {\n            value,\n            registeredAt: Date.now()\n        })\n        this.scheduleSweep()\n    }\n\n    unregister(token: unknown) {\n        this.registrations.delete(token)\n    }\n\n    // Bound so it can be used directly as setTimeout callback.\n    sweep = (maxAge = REGISTRY_FINALIZE_AFTER) => {\n        // cancel timeout so we can force sweep anytime\n        clearTimeout(this.sweepTimeout)\n        this.sweepTimeout = undefined\n\n        const now = Date.now()\n        this.registrations.forEach((registration, token) => {\n            if (now - registration.registeredAt >= maxAge) {\n                this.finalize(registration.value)\n                this.registrations.delete(token)\n            }\n        })\n\n        if (this.registrations.size > 0) {\n            this.scheduleSweep()\n        }\n    }\n\n    // Bound so it can be exported directly as clearTimers test utility.\n    finalizeAllImmediately = () => {\n        this.sweep(0)\n    }\n\n    private scheduleSweep() {\n        if (this.sweepTimeout === undefined) {\n            this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL)\n        }\n    }\n}\n\nexport const UniversalFinalizationRegistry =\n    typeof FinalizationRegistry !== \"undefined\"\n        ? FinalizationRegistry\n        : TimerBasedFinalizationRegistry\n","import { Reaction } from \"mobx\"\nimport { UniversalFinalizationRegistry } from \"./UniversalFinalizationRegistry\"\n\nexport const observerFinalizationRegistry = new UniversalFinalizationRegistry(\n    (adm: { reaction: Reaction | null }) => {\n        adm.reaction?.dispose()\n        adm.reaction = null\n    }\n)\n","let globalIsUsingStaticRendering = false\n\nexport function enableStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\nimport { printDebugValue } from \"./utils/printDebugValue\"\nimport { observerFinalizationRegistry } from \"./utils/observerFinalizationRegistry\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\ntype ObserverAdministration = {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction | null\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount: boolean\n}\n\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nclass ObjectToBeRetainedByReact {}\n\nfunction objectToBeRetainedByReactFactory() {\n    return new ObjectToBeRetainedByReact()\n}\n\nexport function useObserver<T>(fn: () => T, baseComponentName: string = \"observed\"): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    const [objectRetainedByReact] = React.useState(objectToBeRetainedByReactFactory)\n    // Force update, see #2982\n    const [, setState] = React.useState()\n    const forceUpdate = () => setState([] as any)\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const admRef = React.useRef<ObserverAdministration | null>(null)\n\n    if (!admRef.current) {\n        // First render\n        admRef.current = {\n            reaction: null,\n            mounted: false,\n            changedBeforeMount: false\n        }\n    }\n\n    const adm = admRef.current!\n\n    if (!adm.reaction) {\n        // First render or component was not committed and reaction was disposed by registry\n        adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (adm.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                adm.changedBeforeMount = true\n            }\n        })\n\n        observerFinalizationRegistry.register(objectRetainedByReact, adm, adm)\n    }\n\n    React.useDebugValue(adm.reaction, printDebugValue)\n\n    React.useEffect(() => {\n        observerFinalizationRegistry.unregister(adm)\n\n        adm.mounted = true\n\n        if (adm.reaction) {\n            if (adm.changedBeforeMount) {\n                // Got a change before mount, force an update\n                adm.changedBeforeMount = false\n                forceUpdate()\n            }\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n\n            // Re-create the reaction\n            adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n                // We've definitely already been mounted at this point\n                forceUpdate()\n            })\n            forceUpdate()\n        }\n\n        return () => {\n            adm.reaction!.dispose()\n            adm.reaction = null\n            adm.mounted = false\n            adm.changedBeforeMount = false\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    adm.reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n\n    if (exception) {\n        throw exception // re-throw any exceptions caught during rendering\n    }\n\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nlet warnObserverOptionsDeprecated = true\n\nconst hasSymbol = typeof Symbol === \"function\" && Symbol.for\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nconst ReactForwardRefSymbol = hasSymbol\n    ? Symbol.for(\"react.forward_ref\")\n    : typeof forwardRef === \"function\" && forwardRef((props: any) => null)[\"$$typeof\"]\n\nconst ReactMemoSymbol = hasSymbol\n    ? Symbol.for(\"react.memo\")\n    : typeof memo === \"function\" && memo((props: any) => null)[\"$$typeof\"]\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.ForwardRefRenderFunction<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.ForwardRefExoticComponent<\n        React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n    >\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.ForwardRefRenderFunction<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.ForwardRefRenderFunction<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent:\n        | React.ForwardRefRenderFunction<TRef, P>\n        | React.FunctionComponent<P>\n        | React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>,\n    // TODO remove in next major\n    options?: IObserverOptions\n) {\n    if (process.env.NODE_ENV !== \"production\" && warnObserverOptionsDeprecated && options) {\n        warnObserverOptionsDeprecated = false\n        console.warn(\n            `[mobx-react-lite] \\`observer(fn, { forwardRef: true })\\` is deprecated, use \\`observer(React.forwardRef(fn))\\``\n        )\n    }\n\n    if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n        throw new Error(\n            `[mobx-react-lite] You are trying to use \\`observer\\` on a function component wrapped in either another \\`observer\\` or \\`React.memo\\`. The observer already applies 'React.memo' for you.`\n        )\n    }\n\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    let useForwardRef = options?.forwardRef ?? false\n    let render = baseComponent\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    // If already wrapped with forwardRef, unwrap,\n    // so we can patch render and apply memo\n    if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n        useForwardRef = true\n        render = baseComponent[\"render\"]\n        if (typeof render !== \"function\") {\n            throw new Error(\n                `[mobx-react-lite] \\`render\\` property of ForwardRef was not a function`\n            )\n        }\n    }\n\n    let observerComponent = (props: any, ref: React.Ref<TRef>) => {\n        return useObserver(() => render(props, ref), baseComponentName)\n    }\n\n    // Don't set `displayName` for anonymous components,\n    // so the `displayName` can be customized by user, see #3192.\n    if (baseComponentName !== \"\") {\n        ;(observerComponent as React.FunctionComponent).displayName = baseComponentName\n    }\n\n    // Support legacy context: `contextTypes` must be applied before `memo`\n    if ((baseComponent as any).contextTypes) {\n        ;(observerComponent as React.FunctionComponent).contextTypes = (\n            baseComponent as any\n        ).contextTypes\n    }\n\n    if (useForwardRef) {\n        // `forwardRef` must be applied prior `memo`\n        // `forwardRef(observer(cmp))` throws:\n        // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n        observerComponent = forwardRef(observerComponent)\n    }\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    observerComponent = memo(observerComponent)\n\n    copyStaticProperties(baseComponent, observerComponent)\n\n    if (\"production\" !== process.env.NODE_ENV) {\n        Object.defineProperty(observerComponent, \"contextTypes\", {\n            set() {\n                throw new Error(\n                    `[mobx-react-lite] \\`${\n                        this.displayName || this.type?.displayName || \"Component\"\n                    }.contextTypes\\` must be set before applying \\`observer\\`.`\n                )\n            }\n        })\n    }\n\n    return observerComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true,\n    // Don't redefine `displayName`,\n    // it's defined as getter-setter pair on `memo` (see #3192).\n    displayName: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement | null\n    render?(): React.ReactElement | null\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nif (\"production\" !== process.env.NODE_ENV) {\n    ObserverComponent.propTypes = {\n        children: ObserverPropsCheck,\n        render: ObserverPropsCheck\n    }\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, AnnotationsMap } from \"mobx\"\nimport { useState } from \"react\"\n\nexport function useLocalObservable<TStore extends Record<string, any>>(\n    initializer: () => TStore,\n    annotations?: AnnotationsMap<TStore, never>\n): TStore {\n    return useState(() => observable(initializer(), annotations, { autoBind: true }))[0]\n}\n","import { useDeprecated } from \"./utils/utils\"\nimport { observable, runInAction } from \"mobx\"\nimport { useState } from \"react\"\n\nexport function useAsObservableSource<TSource extends object>(current: TSource): TSource {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\n            \"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\"\n        )\n    const [res] = useState(() => observable(current, {}, { deep: false }))\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n","import { observable } from \"mobx\"\nimport { useState } from \"react\"\n\nimport { useDeprecated } from \"./utils/utils\"\nimport { useAsObservableSource } from \"./useAsObservableSource\"\n\nexport function useLocalStore<TStore extends Record<string, any>>(initializer: () => TStore): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source: TSource) => TStore,\n    current: TSource\n): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source?: TSource) => TStore,\n    current?: TSource\n): TStore {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\n            \"[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.\"\n        )\n    const source = current && useAsObservableSource(current)\n    return useState(() => observable(initializer(source), undefined, { autoBind: true }))[0]\n}\n","import \"./utils/assertEnvironment\"\n\nimport { unstable_batchedUpdates as batch } from \"./utils/reactBatchedUpdates\"\nimport { observerBatching } from \"./utils/observerBatching\"\nimport { useDeprecated } from \"./utils/utils\"\nimport { useObserver as useObserverOriginal } from \"./useObserver\"\nimport { enableStaticRendering } from \"./staticRendering\"\nimport { observerFinalizationRegistry } from \"./utils/observerFinalizationRegistry\"\n\nobserverBatching(batch)\n\nexport { isUsingStaticRendering, enableStaticRendering } from \"./staticRendering\"\nexport { observer, IObserverOptions } from \"./observer\"\nexport { Observer } from \"./ObserverComponent\"\nexport { useLocalObservable } from \"./useLocalObservable\"\nexport { useLocalStore } from \"./useLocalStore\"\nexport { useAsObservableSource } from \"./useAsObservableSource\"\n\nexport const clearTimers = observerFinalizationRegistry[\"finalizeAllImmediately\"] ?? (() => {})\n\nexport function useObserver<T>(fn: () => T, baseComponentName: string = \"observed\"): T {\n    if (\"production\" !== process.env.NODE_ENV) {\n        useDeprecated(\n            \"[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.\"\n        )\n    }\n    return useObserverOriginal(fn, baseComponentName)\n}\n\nexport { isObserverBatched, observerBatching } from \"./utils/observerBatching\"\n\nexport function useStaticRendering(enable: boolean) {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\n            \"[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead\"\n        )\n    }\n    enableStaticRendering(enable)\n}\n"],"names":["useState","Error","makeObservable","defaultNoopBatch","callback","observerBatching","reactionScheduler","configure","isObserverBatched","printDebugValue","v","getDependencyTree","TimerBasedFinalizationRegistry","finalize","_this","Object","defineProperty","Map","maxAge","clearTimeout","sweepTimeout","undefined","now","Date","registrations","forEach","registration","token","registeredAt","value","delete","size","scheduleSweep","sweep","target","this","set","setTimeout","observerFinalizationRegistry","FinalizationRegistry","adm","_a","reaction","dispose","globalIsUsingStaticRendering","enableStaticRendering","enable","isUsingStaticRendering","observerComponentNameFor","baseComponentName","concat","ObjectToBeRetainedByReact","objectToBeRetainedByReactFactory","useObserver","fn","objectRetainedByReact","__read","React","setState","forceUpdate","admRef","current","mounted","changedBeforeMount","rendering","exception","Reaction","register","unregister","track","e","hasSymbol","Symbol","for","ReactForwardRefSymbol","forwardRef","props","ReactMemoSymbol","memo","observer","baseComponent","options","useForwardRef","render","displayName","name","base","observerComponent","ref","contextTypes","keys","key","hoistBlackList","getOwnPropertyDescriptor","$$typeof","compare","type","ObserverComponent","children","component","useLocalObservable","initializer","annotations","observable","autoBind","useAsObservableSource","res","deep","runInAction","assign","useLocalStore","source","batch","clearTimers","useObserverOriginal","useStaticRendering"],"sourceRoot":""}