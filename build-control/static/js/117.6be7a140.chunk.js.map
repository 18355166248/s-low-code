{"version":3,"file":"static/js/117.6be7a140.chunk.js","mappings":"8KAEMA,EAAiB,CAAC,EAEXC,GAAgBC,EAAAA,EAAAA,eAAcF,GAE9BG,EAAmB,WAAH,OAC3BC,EAAAA,EAAAA,YAAWH,EAAe,E,gECwGfI,EAAQ,KApFHC,EAAAA,EAAAA,IAchB,SAAAC,IAAe,IAADC,EAAA,MAAAC,EAAAA,EAAAA,GAAA,KAAAF,GAAA,KAbdG,kBAAY,OACZC,eAAS,OACTC,gBAAU,OACVC,iBAAW,OACXC,KAAO,CACLC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,KAAM,IACN,KAEFC,eAAiB,CAAEC,QAAS,MAc5B,KACAC,gBAAkB,WAChBb,EAAKG,WAAY,EAChBH,EAAKW,eAAeC,QAAgBE,MACvC,EAAE,KACFC,iBAAmB,WACjBf,EAAKG,WAAY,CACnB,EACA,KACAa,gBAAkB,SAACC,GACjBjB,EAAKE,aAAee,CACtB,EAEA,KACAC,QAAU,WChEL,IAAuBC,EDiE1BnB,EAAKM,KAAKC,SAAU,GCjEMY,EDkEZ,CACZC,SAAUpB,EAAKI,WAAWgB,SAC1BC,OAAQrB,EAAKI,WAAWQ,SCnErBU,EAAAA,EAAOC,IAAI,eAAgB,CAAEJ,OAAAA,KDqE/BK,MAAK,SAACC,GACLzB,EAAKM,KAAO,CACVI,MAAMgB,EAAAA,EAAAA,IAAWD,EAAIf,MACrBH,SAAS,EACTC,SAAS,EACTC,OAAO,GAETT,EAAKI,YAAUuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ3B,EAAKI,YAAU,IAAEwB,MAAOH,EAAIG,OACrD,IACCC,OAAM,WACL7B,EAAKM,KAAKG,OAAQ,EAClBT,EAAKM,KAAKC,SAAU,CACtB,GACJ,EAAE,KAEFuB,gBAAkB,WAChB9B,EAAKI,WAAWQ,QAAU,CAC5B,EAEA,KACAmB,MAAQ,WACN/B,EAAKE,aAAe,CAAC,EACrBF,EAAK8B,kBACL9B,EAAKkB,SACP,EAEA,KACAc,eAAiB,SAACC,GAChBjC,EAAKK,YAAc4B,CACrB,EAEA,KACAC,cAAgB,SAAC9B,GACfJ,EAAKI,YAAUuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ3B,EAAKI,YAAU,IAAEQ,QAASR,EAAWQ,UAC5DZ,EAAKkB,SACP,GAlEEiB,EAAAA,EAAAA,IAAmBC,MACnBA,KAAKjC,WAAY,EACjBiC,KAAKlC,aAAe,CAAC,EACrBkC,KAAK/B,YAAc,CAAC,EACpB+B,KAAKhC,WAAa,CAChBQ,QAAS,EACTQ,SAAU,GACVQ,MAAO,EAEX,K,4BEgDF,GAAeS,EAAAA,EAAAA,WAzFgB,WAC7B,IAAAC,EAOI3C,IANFS,EAAUkC,EAAVlC,WACAE,EAAIgC,EAAJhC,KACAY,EAAOoB,EAAPpB,QACAgB,EAAaI,EAAbJ,cAKIK,GAJUD,EAAdN,eACeM,EAAfzB,gBAGmC,CACnC,CACE2B,MAAO,2BACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,eACPC,UAAW,OACXC,IAAK,OACLC,UAAU,GAEZ,CACEH,MAAO,eACPC,UAAW,OACXC,IAAK,OACLE,OAAQ,SAACC,GAAa,OACpBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKF,EAAOG,IAAI,GAAGC,MAAO,CAAEC,MAAO,MAAS,KA4CvD,OALAC,EAAAA,EAAAA,YAAU,WACRjC,GAEF,GAAG,KAGD4B,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CACJC,OAAQ,CAAEC,EAAG,eACbL,MAAO,CAAEM,UAAW,IACpBC,WAAYlD,EAAKI,KACjB6B,QAASA,EACTkB,OAAO,KACPC,QAASpD,EAAKC,QACdH,YAAUuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACLvB,GAAU,IACbuD,kBAAkB,EAClBC,UAAW,SAAChC,GAAa,gBAAAiC,OAAUjC,EAAK,cAE1CkC,SAAU5B,GAGhB,I,2DC1FM6B,EAA2B,CAC/BC,aAAc,SAACC,GACb,IAAMC,EAAQD,EAAKE,KAAKC,QAAQ,WAAa,EAI7C,OAHKF,GACHG,EAAAA,GAAQ5D,MAAM,GAADoD,OAAII,EAAKK,KAAI,uBAErBJ,GAASK,EAAAA,EAAOC,WACzB,EACAC,OAAO,GAADZ,OAAKa,8BAA8B,uBACzCC,QAAS,CACPC,cAAe,WAAYC,EAAAA,EAAAA,QA6B/B,MAzBA,WACE,IAAQ3D,EAAYvB,IAAZuB,QAER4D,GAAgCC,EAAAA,EAAAA,UAA6B,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzDI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAa5B,OACElC,EAAAA,EAAAA,KAACyB,EAAAA,GAAM5C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKoC,GAAW,IAAEmB,SAAUA,EAAUpB,SAZ/C,SAAiBsB,GAA2D,IAAxDnB,EAAImB,EAAJnB,KAAMiB,EAAQE,EAARF,SACJ,SAAhBjB,EAAKoB,QACPnE,IACAoE,YAAW,WACTH,EAAY,GACd,GAAG,MAEHA,EAAYD,EAEhB,EAGkEK,UAC9DzC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CAACrB,KAAK,UAAUsB,MAAM3C,EAAAA,EAAAA,KAAC4C,EAAAA,EAAc,IAAIH,SAAC,+BAKvD,ECnBA,EAhBmB,WACjB,OACEzC,EAAAA,EAAAA,KAACrD,EAAckG,SAAQ,CAAC9C,MAAOhD,EAAM0F,UACnCK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uCAAsCN,SAAA,EAGnDzC,EAAAA,EAAAA,KAACgD,EAAS,KAEVhD,EAAAA,EAAAA,KAACiD,EAAS,QAMlB,C","sources":["pages/Images/Images.context.ts","pages/Images/Images.models.ts","services/images.ts","pages/Images/TableImages.tsx","pages/Images/UploadBtn.tsx","pages/Images/indexImages.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nconst initState: any = {};\r\n\r\nexport const ImagesContext = createContext(initState);\r\n\r\nexport const useImagesContext = () =>\r\n  useContext(ImagesContext);\r\n","import { getImagesList } from \"@/services/images\";\r\nimport { initListId } from \"@/utils/common\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Pagination {\r\n  current: number;\r\n  pageSize: number;\r\n  total: number;\r\n}\r\n\r\ninterface Status {\r\n  pending: boolean;\r\n  success: boolean;\r\n  error: boolean;\r\n}\r\n\r\ninterface List extends Status {\r\n  data: any[];\r\n}\r\n\r\ninterface ImagesInterface {\r\n  modalShow: boolean;\r\n  filterParams: any;\r\n  pagination: Pagination;\r\n  list: List;\r\n}\r\n\r\nclass ImagesModels implements ImagesInterface {\r\n  filterParams: any;\r\n  modalShow: boolean;\r\n  pagination: Pagination;\r\n  modalOption: any;\r\n  list = {\r\n    pending: false,\r\n    success: false,\r\n    error: false,\r\n    data: [],\r\n  };\r\n\r\n  modalDialogRef = { current: null };\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.modalShow = false;\r\n    this.filterParams = {};\r\n    this.modalOption = {};\r\n    this.pagination = {\r\n      current: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n    };\r\n  }\r\n\r\n  // 新增/编辑/删除\r\n  openModalHandle = () => {\r\n    this.modalShow = true;\r\n    (this.modalDialogRef.current as any).open();\r\n  };\r\n  closeModalHandle = () => {\r\n    this.modalShow = false;\r\n  };\r\n  // 设置过滤器表单数据\r\n  setFilterParams = (allValues: any) => {\r\n    this.filterParams = allValues;\r\n  };\r\n\r\n  // 获取列表\r\n  getList = () => {\r\n    this.list.pending = true;\r\n    getImagesList({\r\n      pageSize: this.pagination.pageSize,\r\n      pageNo: this.pagination.current,\r\n    })\r\n      .then((res: any) => {\r\n        this.list = {\r\n          data: initListId(res.data) as any,\r\n          pending: false,\r\n          success: true,\r\n          error: false,\r\n        };\r\n        this.pagination = { ...this.pagination, total: res.total };\r\n      })\r\n      .catch(() => {\r\n        this.list.error = true;\r\n        this.list.pending = false;\r\n      });\r\n  };\r\n\r\n  resetPagination = () => {\r\n    this.pagination.current = 1;\r\n  };\r\n\r\n  // 重置过滤器\r\n  reset = () => {\r\n    this.filterParams = {};\r\n    this.resetPagination();\r\n    this.getList();\r\n  };\r\n\r\n  // 设置传入modal的参数\r\n  setModalOption = (option: any) => {\r\n    this.modalOption = option;\r\n  };\r\n\r\n  // 表格分页器触发\r\n  onTableChange = (pagination: { current: number }) => {\r\n    this.pagination = { ...this.pagination, current: pagination.current };\r\n    this.getList();\r\n  };\r\n}\r\n\r\nexport const store = new ImagesModels();\r\n","import $axios from \"./$axios\";\r\nimport { PAGINATION_DTO } from \"./types/pagination\";\r\n\r\nexport function getImagesList(params: PAGINATION_DTO) {\r\n  return $axios.get(\"/upload/list\", { params });\r\n}\r\n\r\nexport function uploadFile(data: File) {\r\n  return $axios.post(\"/upload/file\", data, {\r\n    headers: {\r\n      \"Content-Type\": \"mutlipart/form-data\",\r\n    },\r\n  });\r\n}\r\nexport function uploadFiles(data: File[]) {\r\n  return $axios.post(\"/upload/files\", data, {\r\n    headers: {\r\n      \"Content-Type\": \"mutlipart/form-data\",\r\n    },\r\n  });\r\n}\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useImagesContext } from \"./Images.context\";\r\nimport { ActionList } from \"jiang-btp-design\";\r\nimport { Table } from \"antd\";\r\nimport { ColumnsType } from \"antd/es/table\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\ninterface Props {}\r\n\r\nconst TableImages: FC<Props> = () => {\r\n  const {\r\n    pagination,\r\n    list,\r\n    getList,\r\n    onTableChange,\r\n    setModalOption,\r\n    openModalHandle,\r\n  } = useImagesContext();\r\n\r\n  const columns: ColumnsType<object> = [\r\n    {\r\n      title: \"上传日期\",\r\n      dataIndex: \"file\",\r\n      key: \"file\",\r\n    },\r\n    {\r\n      title: \"地址\",\r\n      dataIndex: \"path\",\r\n      key: \"path\",\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"图片\",\r\n      dataIndex: \"path\",\r\n      key: \"path\",\r\n      render: (value: string) => (\r\n        <img src={value} alt=\"\" style={{ width: 100 }} />\r\n      ),\r\n    },\r\n    // {\r\n    //   title: \"操作\",\r\n    //   fixed: \"right\",\r\n    //   width: 100,\r\n    //   render: (record: any) => {\r\n    //     const actionList: any[] = [\r\n    //       {\r\n    //         type: \"text\",\r\n    //         text: \"编辑\",\r\n    //         onClick: () => {\r\n    //           setModalOption({\r\n    //             initialValues: record,\r\n    //             title: \"编辑\",\r\n    //             type: \"edit\",\r\n    //           });\r\n    //           openModalHandle();\r\n    //         },\r\n    //       },\r\n    //       {\r\n    //         type: \"text\",\r\n    //         text: \"查看\",\r\n    //         onClick: () => {\r\n    //           setModalOption({\r\n    //             initialValues: record,\r\n    //             title: \"查看\",\r\n    //             type: \"detail\",\r\n    //           });\r\n    //           openModalHandle();\r\n    //         },\r\n    //       },\r\n    //     ];\r\n    //     return <ActionList columns={actionList} />;\r\n    //   },\r\n    // },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getList();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      scroll={{ x: \"max-content\" }}\r\n      style={{ marginTop: 16 }}\r\n      dataSource={list.data}\r\n      columns={columns}\r\n      rowKey=\"id\"\r\n      loading={list.pending}\r\n      pagination={{\r\n        ...pagination,\r\n        hideOnSinglePage: false,\r\n        showTotal: (total: number) => `共 ${total} 条`,\r\n      }}\r\n      onChange={onTableChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(TableImages);\r\n","import { getToken } from \"@/utils/auth\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { Button, Upload, UploadProps, message } from \"antd\";\r\nimport { UploadChangeParam, UploadFile } from \"antd/es/upload\";\r\nimport { useState } from \"react\";\r\nimport { useImagesContext } from \"./Images.context\";\r\n\r\nconst uploadProps: UploadProps = {\r\n  beforeUpload: (file) => {\r\n    const isPNG = file.type.indexOf(\"image/\") > -1;\r\n    if (!isPNG) {\r\n      message.error(`${file.name} is not a png file`);\r\n    }\r\n    return isPNG || Upload.LIST_IGNORE;\r\n  },\r\n  action: `${process.env.REACT_APP_BASE_URL}/api/v1/upload/file`,\r\n  headers: {\r\n    Authorization: \"Bearer \" + getToken(),\r\n  },\r\n};\r\n\r\nfunction UploadBtn() {\r\n  const { getList } = useImagesContext();\r\n\r\n  const [fileList, setFileList] = useState<UploadFile<File>[]>([]);\r\n\r\n  function onChange({ file, fileList }: UploadChangeParam<UploadFile<File>>) {\r\n    if (file.status === \"done\") {\r\n      getList();\r\n      setTimeout(() => {\r\n        setFileList([]);\r\n      }, 400);\r\n    } else {\r\n      setFileList(fileList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Upload {...uploadProps} fileList={fileList} onChange={onChange}>\r\n      <Button type=\"primary\" icon={<UploadOutlined />}>\r\n        上传图片\r\n      </Button>\r\n    </Upload>\r\n  );\r\n}\r\n\r\nexport default UploadBtn;\r\n","import React, { FC } from \"react\";\r\n// import FilterForm from \"./FilterFormImages\";\r\n// import ModalDialog from \"./ModalDialogImages\";\r\nimport { ImagesContext } from \"./Images.context\";\r\nimport { store } from \"./Images.models\";\r\nimport TableView from \"./TableImages\";\r\nimport UploadBtn from \"./UploadBtn\";\r\n\r\n// 图片管理\r\nconst Images: FC = () => {\r\n  return (\r\n    <ImagesContext.Provider value={store}>\r\n      <div className=\"p-6 bg-white rounded-lg shadow-outer\">\r\n        {/* 过滤器 */}\r\n        {/* <FilterForm /> */}\r\n        <UploadBtn />\r\n        {/* 表格 */}\r\n        <TableView />\r\n        {/* 新增弹窗 */}\r\n        {/* <ModalDialog /> */}\r\n      </div>\r\n    </ImagesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Images;\r\n"],"names":["initState","ImagesContext","createContext","useImagesContext","useContext","store","_createClass","ImagesModels","_this","_classCallCheck","filterParams","modalShow","pagination","modalOption","list","pending","success","error","data","modalDialogRef","current","openModalHandle","open","closeModalHandle","setFilterParams","allValues","getList","params","pageSize","pageNo","$axios","get","then","res","initListId","_objectSpread","total","catch","resetPagination","reset","setModalOption","option","onTableChange","makeAutoObservable","this","observer","_useImagesContext","columns","title","dataIndex","key","ellipsis","render","value","_jsx","src","alt","style","width","useEffect","Table","scroll","x","marginTop","dataSource","rowKey","loading","hideOnSinglePage","showTotal","concat","onChange","uploadProps","beforeUpload","file","isPNG","type","indexOf","message","name","Upload","LIST_IGNORE","action","process","headers","Authorization","getToken","_useState","useState","_useState2","_slicedToArray","fileList","setFileList","_ref","status","setTimeout","children","Button","icon","UploadOutlined","Provider","_jsxs","className","UploadBtn","TableView"],"sourceRoot":""}