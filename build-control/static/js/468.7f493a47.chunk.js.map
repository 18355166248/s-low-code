{"version":3,"file":"static/js/468.7f493a47.chunk.js","mappings":"8KAEMA,EAAiB,CAAC,EAEXC,GAAcC,EAAAA,EAAAA,eAAcF,G,sDCuG5BG,EAAQ,KAjFLC,EAAAA,EAAAA,IAcd,SAAAC,IAAe,IAADC,EAAA,MAAAC,EAAAA,EAAAA,GAAA,KAAAF,GAAA,KAbdG,kBAAY,OACZC,eAAS,OACTC,gBAAU,OACVC,iBAAW,OACXC,KAAO,CACLC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,KAAM,IACN,KAEFC,eAAiB,CAAEC,QAAS,MAc5B,KACAC,gBAAkB,WAChBb,EAAKG,WAAY,EAChBH,EAAKW,eAAeC,QAAgBE,MACvC,EAAE,KACFC,iBAAmB,WACjBf,EAAKG,WAAY,CACnB,EACA,KACAa,gBAAkB,SAACC,GACjBjB,EAAKE,aAAee,CACtB,EAEA,KACAC,QAAU,WC/DL,IAAqBC,EDgExBnB,EAAKM,KAAKC,SAAU,GChEIY,EDiEZnB,EAAKE,aChEZkB,EAAAA,EAAOC,IAAI,SAAU,CAAEF,OAAAA,KDiEzBG,MAAK,SAACC,GACLvB,EAAKM,KAAO,CACVI,KAAMa,EACNhB,SAAS,EACTC,SAAS,EACTC,OAAO,EAGX,IACCe,OAAM,WACLxB,EAAKM,KAAKG,OAAQ,EAClBT,EAAKM,KAAKC,SAAU,CACtB,GACJ,EAAE,KAEFkB,gBAAkB,WAChBzB,EAAKI,WAAWQ,QAAU,CAC5B,EAEA,KACAc,MAAQ,WACN1B,EAAKE,aAAe,CAAC,EACrBF,EAAKyB,kBACLzB,EAAKkB,SACP,EAEA,KACAS,eAAiB,SAACC,GAChB5B,EAAKK,YAAcuB,CACrB,EAEA,KACAC,cAAgB,SAACzB,GACfJ,EAAKI,YAAU0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,EAAKI,YAAU,IAAEQ,QAASR,EAAWQ,UAC5DZ,EAAKkB,SACP,GA/DEa,EAAAA,EAAAA,IAAmBC,MACnBA,KAAK7B,WAAY,EACjB6B,KAAK9B,aAAe,CAAC,EACrB8B,KAAK3B,YAAc,CAAC,EACpB2B,KAAK5B,WAAa,CAChBQ,QAAS,EACTqB,SAAU,GACVC,MAAO,EAEX,K,6BEoCF,GAAeC,EAAAA,EAAAA,WA5Ec,WAC3B,IAAAC,GHJAC,EAAAA,EAAAA,YAAW1C,GGMTW,GADU8B,EAAVhC,WACIgC,EAAJ9B,MACAY,EAAOkB,EAAPlB,QACAW,EAAaO,EAAbP,cACcO,EAAdT,eACeS,EAAfvB,gBAuDF,OALAyB,EAAAA,EAAAA,YAAU,WACRpB,GAEF,GAAG,KAGDqB,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,OAAQ,CAAEC,EAAG,eACbC,MAAO,CAAEC,UAAW,IACpBC,WAAYvC,EAAKI,KACjBoC,QAzDiC,CACnC,CACEC,MAAO,2BACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,eACPC,UAAW,MACXC,IAAK,QAiDLC,OAAO,KACPC,QAAS7C,EAAKC,QACdH,YAAY,EACZgD,SAAUvB,GAGhB,IC7DA,EAfiB,WACf,OACEU,EAAAA,EAAAA,KAAC5C,EAAY0D,SAAQ,CAACC,MAAOzD,EAAM0D,UACjChB,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,uCAAsCD,UAInDhB,EAAAA,EAAAA,KAACkB,EAAS,OAMlB,C","sources":["pages/Menu/Menu.context.ts","pages/Menu/Menu.models.ts","services/menu.ts","pages/Menu/TableMenu.tsx","pages/Menu/indexMenu.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nconst initState: any = {};\r\n\r\nexport const MenuContext = createContext(initState);\r\n\r\nexport const useMenuContext = () =>\r\n  useContext(MenuContext);\r\n","import { getMenuList } from \"@/services/menu\";\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Pagination {\r\n  current: number;\r\n  pageSize: number;\r\n  total: number;\r\n}\r\n\r\ninterface Status {\r\n  pending: boolean;\r\n  success: boolean;\r\n  error: boolean;\r\n}\r\n\r\ninterface List extends Status {\r\n  data: any[];\r\n}\r\n\r\ninterface MenuInterface {\r\n  modalShow: boolean;\r\n  filterParams: any;\r\n  pagination: Pagination;\r\n  list: List;\r\n}\r\n\r\nclass MenuModels implements MenuInterface {\r\n  filterParams: any;\r\n  modalShow: boolean;\r\n  pagination: Pagination;\r\n  modalOption: any;\r\n  list = {\r\n    pending: false,\r\n    success: false,\r\n    error: false,\r\n    data: [],\r\n  };\r\n\r\n  modalDialogRef = { current: null };\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.modalShow = false;\r\n    this.filterParams = {};\r\n    this.modalOption = {};\r\n    this.pagination = {\r\n      current: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n    };\r\n  }\r\n\r\n  // 新增/编辑/删除\r\n  openModalHandle = () => {\r\n    this.modalShow = true;\r\n    (this.modalDialogRef.current as any).open();\r\n  };\r\n  closeModalHandle = () => {\r\n    this.modalShow = false;\r\n  };\r\n  // 设置过滤器表单数据\r\n  setFilterParams = (allValues: any) => {\r\n    this.filterParams = allValues;\r\n  };\r\n\r\n  // 获取列表\r\n  getList = () => {\r\n    this.list.pending = true;\r\n    getMenuList(this.filterParams)\r\n      .then((res: any) => {\r\n        this.list = {\r\n          data: res,\r\n          pending: false,\r\n          success: true,\r\n          error: false,\r\n        };\r\n        // this.pagination = { ...this.pagination, total: res.totalSize };\r\n      })\r\n      .catch(() => {\r\n        this.list.error = true;\r\n        this.list.pending = false;\r\n      });\r\n  };\r\n\r\n  resetPagination = () => {\r\n    this.pagination.current = 1;\r\n  };\r\n\r\n  // 重置过滤器\r\n  reset = () => {\r\n    this.filterParams = {};\r\n    this.resetPagination();\r\n    this.getList();\r\n  };\r\n\r\n  // 设置传入modal的参数\r\n  setModalOption = (option: any) => {\r\n    this.modalOption = option;\r\n  };\r\n\r\n  // 表格分页器触发\r\n  onTableChange = (pagination: { current: number }) => {\r\n    this.pagination = { ...this.pagination, current: pagination.current };\r\n    this.getList();\r\n  };\r\n}\r\n\r\nexport const store = new MenuModels();\r\n","import $axios from \"./$axios\";\r\nimport { DELETE_MENU_DTO, GET_MENU_DTO, MENU_DTO } from \"./types/menu\";\r\n\r\nexport function getMenuList(params: GET_MENU_DTO[\"PARAMS\"]) {\r\n  return $axios.get(\"/menus\", { params });\r\n}\r\n\r\nexport function createMenu(data: MENU_DTO[\"PARAMS\"]): MENU_DTO[\"RESPONSE\"] {\r\n  return $axios.post(\"/menus\", data);\r\n}\r\n\r\nexport function updateMenu(data: MENU_DTO[\"PARAMS\"]): MENU_DTO[\"RESPONSE\"] {\r\n  return $axios.patch(`/menus/${data.id}`, data);\r\n}\r\n\r\nexport function deleteMenu(data: DELETE_MENU_DTO[\"PARAMS\"]) {\r\n  return $axios.delete(`/menus/${data.id}`);\r\n}\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useMenuContext } from \"./Menu.context\";\r\nimport { ActionList } from \"jiang-btp-design\";\r\nimport { Table } from \"antd\";\r\nimport { ColumnsType } from \"antd/es/table\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\ninterface Props {}\r\n\r\nconst TableMenu: FC<Props> = () => {\r\n  const {\r\n    pagination,\r\n    list,\r\n    getList,\r\n    onTableChange,\r\n    setModalOption,\r\n    openModalHandle,\r\n  } = useMenuContext();\r\n\r\n  const columns: ColumnsType<object> = [\r\n    {\r\n      title: \"菜单名称\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"权限\",\r\n      dataIndex: \"acl\",\r\n      key: \"acl\",\r\n    },\r\n    // {\r\n    //   title: \"操作\",\r\n    //   fixed: \"right\",\r\n    //   width: 100,\r\n    //   render: (record: any) => {\r\n    //     const actionList: any[] = [\r\n    //       {\r\n    //         type: \"text\",\r\n    //         text: \"编辑\",\r\n    //         onClick: () => {\r\n    //           setModalOption({\r\n    //             initialValues: record,\r\n    //             title: \"编辑\",\r\n    //             type: \"edit\",\r\n    //           });\r\n    //           openModalHandle();\r\n    //         },\r\n    //       },\r\n    //       {\r\n    //         type: \"text\",\r\n    //         text: \"查看\",\r\n    //         onClick: () => {\r\n    //           setModalOption({\r\n    //             initialValues: record,\r\n    //             title: \"查看\",\r\n    //             type: \"detail\",\r\n    //           });\r\n    //           openModalHandle();\r\n    //         },\r\n    //       },\r\n    //     ];\r\n    //     return <ActionList columns={actionList} />;\r\n    //   },\r\n    // },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getList();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      scroll={{ x: \"max-content\" }}\r\n      style={{ marginTop: 16 }}\r\n      dataSource={list.data}\r\n      columns={columns}\r\n      rowKey=\"id\"\r\n      loading={list.pending}\r\n      pagination={false}\r\n      onChange={onTableChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(TableMenu);\r\n","import React, { FC } from \"react\";\r\n// import FilterForm from './FilterFormMenu';\r\n// import ModalDialog from './ModalDialogMenu';\r\nimport { MenuContext } from \"./Menu.context\";\r\nimport { store } from \"./Menu.models\";\r\nimport TableView from \"./TableMenu\";\r\n\r\n// 菜单管理\r\nconst Menu: FC = () => {\r\n  return (\r\n    <MenuContext.Provider value={store}>\r\n      <div className=\"p-6 bg-white rounded-lg shadow-outer\">\r\n        {/* 过滤器 */}\r\n        {/* <FilterForm /> */}\r\n        {/* 表格 */}\r\n        <TableView />\r\n        {/* 新增弹窗 */}\r\n        {/* <ModalDialog /> */}\r\n      </div>\r\n    </MenuContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"names":["initState","MenuContext","createContext","store","_createClass","MenuModels","_this","_classCallCheck","filterParams","modalShow","pagination","modalOption","list","pending","success","error","data","modalDialogRef","current","openModalHandle","open","closeModalHandle","setFilterParams","allValues","getList","params","$axios","get","then","res","catch","resetPagination","reset","setModalOption","option","onTableChange","_objectSpread","makeAutoObservable","this","pageSize","total","observer","_useMenuContext","useContext","useEffect","_jsx","Table","scroll","x","style","marginTop","dataSource","columns","title","dataIndex","key","rowKey","loading","onChange","Provider","value","children","className","TableView"],"sourceRoot":""}