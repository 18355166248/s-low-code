{"version":3,"file":"static/js/628.b8de827f.chunk.js","mappings":"6KAEMA,EAAiB,CAAC,EAEXC,GAAcC,EAAAA,EAAAA,eAAcF,G,sDCuG5BG,EAAQ,KAjFLC,EAAAA,EAAAA,IAcd,SAAAC,IAAe,IAADC,EAAA,MAAAC,EAAAA,EAAAA,GAAA,KAAAF,GAAA,KAbdG,kBAAY,OACZC,eAAS,OACTC,gBAAU,OACVC,iBAAW,OACXC,KAAO,CACLC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,KAAM,IACN,KAEFC,eAAiB,CAAEC,QAAS,MAc5B,KACAC,gBAAkB,WAChBb,EAAKG,WAAY,EAChBH,EAAKW,eAAeC,QAAgBE,MACvC,EAAE,KACFC,iBAAmB,WACjBf,EAAKG,WAAY,CACnB,EACA,KACAa,gBAAkB,SAACC,GACjBjB,EAAKE,aAAee,CACtB,EAEA,KACAC,QAAU,WC/DL,IAAqBC,EDgExBnB,EAAKM,KAAKC,SAAU,GChEIY,EDiEZnB,EAAKE,aChEZkB,EAAAA,EAAOC,IAAI,SAAU,CAAEF,OAAAA,KDiEzBG,MAAK,SAACC,GACLvB,EAAKM,KAAO,CACVI,KAAMa,EACNhB,SAAS,EACTC,SAAS,EACTC,OAAO,EAGX,IACCe,OAAM,WACLxB,EAAKM,KAAKG,OAAQ,EAClBT,EAAKM,KAAKC,SAAU,CACtB,GACJ,EAAE,KAEFkB,gBAAkB,WAChBzB,EAAKI,WAAWQ,QAAU,CAC5B,EAEA,KACAc,MAAQ,WACN1B,EAAKE,aAAe,CAAC,EACrBF,EAAKyB,kBACLzB,EAAKkB,SACP,EAEA,KACAS,eAAiB,SAACC,GAChB5B,EAAKK,YAAcuB,CACrB,EAEA,KACAC,cAAgB,SAACzB,GACfJ,EAAKI,YAAU0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,EAAKI,YAAU,IAAEQ,QAASR,EAAWQ,UAC5DZ,EAAKkB,SACP,GA/DEa,EAAAA,EAAAA,IAAmBC,MACnBA,KAAK7B,WAAY,EACjB6B,KAAK9B,aAAe,CAAC,EACrB8B,KAAK3B,YAAc,CAAC,EACpB2B,KAAK5B,WAAa,CAChBQ,QAAS,EACTqB,SAAU,GACVC,MAAO,EAEX,K,8BEoCF,GAAeC,EAAAA,EAAAA,WA5Ec,WAC3B,IAAAC,GHJAC,EAAAA,EAAAA,YAAW1C,GGMTW,GADU8B,EAAVhC,WACIgC,EAAJ9B,MACAY,EAAOkB,EAAPlB,QACAW,EAAaO,EAAbP,cACcO,EAAdT,eACeS,EAAfvB,gBAuDF,OALAyB,EAAAA,EAAAA,YAAU,WACRpB,GAEF,GAAG,KAGDqB,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,OAAQ,CAAEC,EAAG,eACbC,MAAO,CAAEC,UAAW,IACpBC,WAAYvC,EAAKI,KACjBoC,QAzDiC,CACnC,CACEC,MAAO,2BACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,eACPC,UAAW,MACXC,IAAK,QAiDLC,OAAO,KACPC,QAAS7C,EAAKC,QACdH,YAAY,EACZgD,SAAUvB,GAGhB,IC7DA,EAfiB,WACf,OACEU,EAAAA,EAAAA,KAAC5C,EAAY0D,SAAQ,CAACC,MAAOzD,EAAM0D,UACjChB,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,uCAAsCD,UAInDhB,EAAAA,EAAAA,KAACkB,EAAS,OAMlB,C","sources":["pages/RemoteComp/Menu/Menu.context.ts","pages/RemoteComp/Menu/Menu.models.ts","services/menu.ts","pages/RemoteComp/Menu/TableMenu.tsx","pages/RemoteComp/Menu/indexMenu.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nconst initState: any = {};\n\nexport const MenuContext = createContext(initState);\n\nexport const useMenuContext = () =>\n  useContext(MenuContext);\n","import { getMenuList } from \"@/services/menu\";\nimport { makeAutoObservable } from \"mobx\";\n\ninterface Pagination {\n  current: number;\n  pageSize: number;\n  total: number;\n}\n\ninterface Status {\n  pending: boolean;\n  success: boolean;\n  error: boolean;\n}\n\ninterface List extends Status {\n  data: any[];\n}\n\ninterface MenuInterface {\n  modalShow: boolean;\n  filterParams: any;\n  pagination: Pagination;\n  list: List;\n}\n\nclass MenuModels implements MenuInterface {\n  filterParams: any;\n  modalShow: boolean;\n  pagination: Pagination;\n  modalOption: any;\n  list = {\n    pending: false,\n    success: false,\n    error: false,\n    data: [],\n  };\n\n  modalDialogRef = { current: null };\n\n  constructor() {\n    makeAutoObservable(this);\n    this.modalShow = false;\n    this.filterParams = {};\n    this.modalOption = {};\n    this.pagination = {\n      current: 1,\n      pageSize: 10,\n      total: 0,\n    };\n  }\n\n  // 新增/编辑/删除\n  openModalHandle = () => {\n    this.modalShow = true;\n    (this.modalDialogRef.current as any).open();\n  };\n  closeModalHandle = () => {\n    this.modalShow = false;\n  };\n  // 设置过滤器表单数据\n  setFilterParams = (allValues: any) => {\n    this.filterParams = allValues;\n  };\n\n  // 获取列表\n  getList = () => {\n    this.list.pending = true;\n    getMenuList(this.filterParams)\n      .then((res: any) => {\n        this.list = {\n          data: res,\n          pending: false,\n          success: true,\n          error: false,\n        };\n        // this.pagination = { ...this.pagination, total: res.totalSize };\n      })\n      .catch(() => {\n        this.list.error = true;\n        this.list.pending = false;\n      });\n  };\n\n  resetPagination = () => {\n    this.pagination.current = 1;\n  };\n\n  // 重置过滤器\n  reset = () => {\n    this.filterParams = {};\n    this.resetPagination();\n    this.getList();\n  };\n\n  // 设置传入modal的参数\n  setModalOption = (option: any) => {\n    this.modalOption = option;\n  };\n\n  // 表格分页器触发\n  onTableChange = (pagination: { current: number }) => {\n    this.pagination = { ...this.pagination, current: pagination.current };\n    this.getList();\n  };\n}\n\nexport const store = new MenuModels();\n","import $axios from \"./$axios\";\nimport { DELETE_MENU_DTO, GET_MENU_DTO, MENU_DTO } from \"./types/menu\";\n\nexport function getMenuList(params: GET_MENU_DTO[\"PARAMS\"]) {\n  return $axios.get(\"/menus\", { params });\n}\n\nexport function createMenu(data: MENU_DTO[\"PARAMS\"]): MENU_DTO[\"RESPONSE\"] {\n  return $axios.post(\"/menus\", data);\n}\n\nexport function updateMenu(data: MENU_DTO[\"PARAMS\"]): MENU_DTO[\"RESPONSE\"] {\n  return $axios.patch(`/menus/${data.id}`, data);\n}\n\nexport function deleteMenu(data: DELETE_MENU_DTO[\"PARAMS\"]) {\n  return $axios.delete(`/menus/${data.id}`);\n}\n","import React, { FC, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useMenuContext } from \"./Menu.context\";\nimport { ActionList } from \"jiang-btp-design\";\nimport { Table } from \"antd\";\nimport { ColumnsType } from \"antd/es/table\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface Props {}\n\nconst TableMenu: FC<Props> = () => {\n  const {\n    pagination,\n    list,\n    getList,\n    onTableChange,\n    setModalOption,\n    openModalHandle,\n  } = useMenuContext();\n\n  const columns: ColumnsType<object> = [\n    {\n      title: \"菜单名称\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"权限\",\n      dataIndex: \"acl\",\n      key: \"acl\",\n    },\n    // {\n    //   title: \"操作\",\n    //   fixed: \"right\",\n    //   width: 100,\n    //   render: (record: any) => {\n    //     const actionList: any[] = [\n    //       {\n    //         type: \"text\",\n    //         text: \"编辑\",\n    //         onClick: () => {\n    //           setModalOption({\n    //             initialValues: record,\n    //             title: \"编辑\",\n    //             type: \"edit\",\n    //           });\n    //           openModalHandle();\n    //         },\n    //       },\n    //       {\n    //         type: \"text\",\n    //         text: \"查看\",\n    //         onClick: () => {\n    //           setModalOption({\n    //             initialValues: record,\n    //             title: \"查看\",\n    //             type: \"detail\",\n    //           });\n    //           openModalHandle();\n    //         },\n    //       },\n    //     ];\n    //     return <ActionList columns={actionList} />;\n    //   },\n    // },\n  ];\n\n  useEffect(() => {\n    getList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Table\n      scroll={{ x: \"max-content\" }}\n      style={{ marginTop: 16 }}\n      dataSource={list.data}\n      columns={columns}\n      rowKey=\"id\"\n      loading={list.pending}\n      pagination={false}\n      onChange={onTableChange}\n    />\n  );\n};\n\nexport default observer(TableMenu);\n","import React, { FC } from \"react\";\n// import FilterForm from './FilterFormMenu';\n// import ModalDialog from './ModalDialogMenu';\nimport { MenuContext } from \"./Menu.context\";\nimport { store } from \"./Menu.models\";\nimport TableView from \"./TableMenu\";\n\n// 菜单管理\nconst Menu: FC = () => {\n  return (\n    <MenuContext.Provider value={store}>\n      <div className=\"p-6 bg-white rounded-lg shadow-outer\">\n        {/* 过滤器 */}\n        {/* <FilterForm /> */}\n        {/* 表格 */}\n        <TableView />\n        {/* 新增弹窗 */}\n        {/* <ModalDialog /> */}\n      </div>\n    </MenuContext.Provider>\n  );\n};\n\nexport default Menu;\n"],"names":["initState","MenuContext","createContext","store","_createClass","MenuModels","_this","_classCallCheck","filterParams","modalShow","pagination","modalOption","list","pending","success","error","data","modalDialogRef","current","openModalHandle","open","closeModalHandle","setFilterParams","allValues","getList","params","$axios","get","then","res","catch","resetPagination","reset","setModalOption","option","onTableChange","_objectSpread","makeAutoObservable","this","pageSize","total","observer","_useMenuContext","useContext","useEffect","_jsx","Table","scroll","x","style","marginTop","dataSource","columns","title","dataIndex","key","rowKey","loading","onChange","Provider","value","children","className","TableView"],"sourceRoot":""}